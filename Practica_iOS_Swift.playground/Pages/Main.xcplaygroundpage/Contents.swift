import UIKit
//Alberto JR
/*
 Nota: He intentado aplicar la programación orientada a objetos en la medida que ha sido posible. Esto ha hecho que al introducir las clases y structs en Sources haya tenido que poner todo publico, y en el caso de las structs, escribir el init para poder hacerlo público. Creo que el fallo está en que he creado todas las clases y structs en la carpeta Sources equivocada.
 */

//MARK: - EJERCICIO 1 -

var tools = Tool()
let primeNumbers = tools.getTheFirstHundredPrimeNumbers()
print("--------------------")
print(primeNumbers.suffix(10))

//MARK: - EJERCICIO 2 -

let addResult = tools.addTheFirst50PrimeNumbers()
print("--------------------")
print("La suma de los 50 primeros números primos es \(addResult)")

//MARK: -  EJERCICIO 3 -

var playersNameList: [String] = ["Vinicius", "Messi", "Ronaldo", "Pedri", "Mbappe", "Modric", "Militao", "Morata", "Valverde","Benzema", "Piqué"]

let retrievedNames = tools.retrieveNamesWithMoreThanTwoVowels(namesList: playersNameList)

print("--------------------")
print(retrievedNames)

//MARK: -EJERCICIO 4-
//Ver fichero "PlayerPosition.swift"

//MARK: - EJERCICIO 5 -

//Ver fichero Member.swift dentro de Sources (Dentro del directorio Sources al nivel de Main, no dentro de Main)

//MARK: - EJERCICIO 6 -
/*
 Ver los ficheros:
 - NationalTeam.swift
 - WorldCup.swift (Esta clase incluye una función que genera una lista de selecciones de prueba)
 */

//MARK: - EJERCICIO 7 -
//Ver la clase Match.swift

printTheFirstTenRandomMatches()

func printTheFirstTenRandomMatches(){
    
    var listOfPlayedMatches: [String] = []
    
    let listOfTeamsToMatch = generationOfNationalTeamsList()
    print("--------------------")
    print("Resultado de 10 partidos alearotios entre los 8 equipos")
    print("--------------------")
    for _ in 1...10{
        let randomOne = Int.random(in: 0...listOfTeamsToMatch.count-1)
        var randomTwo = Int.random(in: 0...listOfTeamsToMatch.count-1)
        var areDifferentRandomNumbers : Bool = false
        
        while !areDifferentRandomNumbers{
            randomTwo = Int.random(in: 0...listOfTeamsToMatch.count-1)
            if randomOne != randomTwo {areDifferentRandomNumbers = true}
        }
        
        let teamLocal = listOfTeamsToMatch[randomOne]
        let teamVisitor = listOfTeamsToMatch[randomTwo]
        
        var matchToPlay = Match(localTeam: teamLocal, visitorTeam: teamVisitor)
        matchToPlay.teamScoredGoals()
        
        print("\(teamLocal.country) \(matchToPlay.matchResult) \(teamVisitor.country)")
        
        listOfPlayedMatches.append("\(teamLocal.country) \(matchToPlay.matchResult) \(teamVisitor.country)")
        
    }
    
}
func generationOfNationalTeamsList()->[NationalTeam]{
    var autogeneratedList:[NationalTeam] = []
    
    // Selección Española:
    let headCoachE = Member(memberID: "se001", name: "Luis", subname: "Enrique", occupation: .HEAD_COACH)
    let player1E = Member(memberID: "je001", name: "Sergio", subname: "Busquets", occupation: .CAPTAIN)
    let player2E = Member(memberID: "je002", name: "David", subname: "Villa", occupation: .PLAYER)
    let tecnico1E = Member(memberID: "te001", name: "Eva", subname: "Inventado", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t001", name: "La Roja", country: "España", team: [player1E,player2E], technicalTeam: [headCoachE,tecnico1E]))
    
    //Selección Brasileña:
    let headCoachB = Member(memberID: "s001", name: "Tite", subname: "", occupation: .HEAD_COACH)
    let player1B = Member(memberID: "jb001", name: "Thiago", subname: "Silva", occupation: .CAPTAIN)
    let player2B = Member(memberID: "jb002", name: "Alex", subname: "Sandro", occupation: .PLAYER)
    let tecnico1B = Member(memberID: "tb001", name: "Eva2", subname: "Inventado2", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t002", name: "La Brasileña", country: "Brasil", team: [player1B, player2B], technicalTeam: [headCoachB,tecnico1B]))
    
    //Selección Francesa:
    let headCoachF = Member(memberID: "sf001", name: "Tite", subname: "", occupation: .HEAD_COACH)
    let player1F = Member(memberID: "jf001", name: "Thiago", subname: "Silva", occupation: .CAPTAIN)
    let player2F = Member(memberID: "jf002", name: "Alex", subname: "Sandro", occupation: .PLAYER)
    let tecnico1F = Member(memberID: "tf001", name: "Eva2", subname: "Inventado3", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t003", name: "La Francesa", country: "Francia", team: [player1F, player2F], technicalTeam: [headCoachF,tecnico1F]))
    
    //Selección Alemana:
    let headCoachA = Member(memberID: "sa001", name: "Hansi", subname: "Flick", occupation: .HEAD_COACH)
    let player1A = Member(memberID: "ja001", name: "Manuel", subname: "Neuer", occupation: .CAPTAIN)
    let player2A = Member(memberID: "ja002", name: "Kai", subname: "Havertz", occupation: .PLAYER)
    let tecnico1A = Member(memberID: "ta001", name: "Elina", subname: "Inventado4", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t004", name: "La Alemana", country: "Alemania", team: [player1A, player2A], technicalTeam: [headCoachA,tecnico1A]))
    
    // Selección Croata:
    let headCoachC = Member(memberID: "sc001", name: "Zlatko", subname: "Dalic", occupation: .HEAD_COACH)
    let player1C = Member(memberID: "jc001", name: "Luka", subname: "Modric", occupation: .CAPTAIN)
    let player2C = Member(memberID: "jc002", name: "Demagoj", subname: "Vida", occupation: .PLAYER)
    let tecnico1C = Member(memberID: "tc001", name: "Ivanka", subname: "Inventado5", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t005", name: "La Croata", country: "Croacia", team: [player1C,player2C], technicalTeam: [headCoachC,tecnico1C]))
    
    //Selección Koreana
    let headCoachK = Member(memberID: "sk001", name: "Paulo", subname: "Bento", occupation: .HEAD_COACH)
    let player1K = Member(memberID: "jk001", name: "Heung-min", subname: "Son", occupation: .CAPTAIN)
    let player2K = Member(memberID: "jk002", name: "Min-jae", subname: "Kim", occupation: .PLAYER)
    let tecnico1K = Member(memberID: "tk001", name: "Eun", subname: "Kim Jong", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t006", name: "La Koreana", country: "Korea del Sur", team: [player1K,player2K], technicalTeam: [headCoachK,tecnico1K]))
    
    
    //Selección Ghana
    let headCoachG = Member(memberID: "sg001", name: "Vacante", subname: "No tienen Seleccionador", occupation: .HEAD_COACH)
    let player1G = Member(memberID: "jg001", name: "André", subname: "Ayew", occupation: .CAPTAIN)
    let player2G = Member(memberID: "jg002", name: "Iñaki", subname: "Williams", occupation: .PLAYER)
    let tecnico1G = Member(memberID: "tg001", name: "Mohammed", subname: "Kudus", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t007", name: "La Ghana", country: "Ghana", team: [player1G,player2G], technicalTeam: [headCoachG,tecnico1G]))
    
    //Selección Japonesa
    let headCoachJ = Member(memberID: "sj001", name: "Hajime", subname: "Moriyasu", occupation: .HEAD_COACH)
    let player1J = Member(memberID: "jj001", name: "Maya", subname: "Yoshida", occupation: .CAPTAIN)
    let player2J = Member(memberID: "jj002", name: "Ao", subname: "Tanaka", occupation: .PLAYER)
    let tecnico1J = Member(memberID: "tj001", name: "Sakura", subname: "Kurogane", occupation: .PHYSIOTHERAPIST)
    autogeneratedList.append(NationalTeam(nationalTeamID: "t008", name: "La Nipona", country: "Japón", team: [player1J,player2J], technicalTeam: [headCoachJ,tecnico1J]))
    
    
    // nationalTeamsList? = autogeneratedList
    return autogeneratedList
}

//MARK: - EJERCICIO 8 -
//Ver clase Group.swift

let worldCup = WorldCup(nationalTeamsList: generationOfNationalTeamsList())

let groupStage: [Group] = worldCup.generateGroups()
print("--------------------")
print("\(groupStage[0].name): \(groupStage[0].groupTeams[0].country), \(groupStage[0].groupTeams[1].country), \(groupStage[0].groupTeams[2].country), \(groupStage[0].groupTeams[3].country) ")

print("\(groupStage[1].name): \(groupStage[1].groupTeams[0].country), \(groupStage[1].groupTeams[1].country), \(groupStage[1].groupTeams[2].country), \(groupStage[1].groupTeams[3].country) ")

//MARK: -EJERCICIO 9 y 10 -
let groupATeams = groupStage[0].groupTeams
let groupBTeams = groupStage[1].groupTeams

let groupAResults = groupStage[0].totalPoints(team: groupATeams)
let groupBResults = groupStage[1].totalPoints(team: groupBTeams)

print("--------------------")
print("Clasificados Grupo A")
print("--------------------")
groupAResults.forEach { team in
    if team.isClassificated == true{
        print(team.teamName)
    }
}
print("--------------------")
print("Clasificados Grupo B")
print("--------------------")
groupBResults.forEach { team in
    if team.isClassificated == true{
        print(team.teamName)
    }
}
